#!/usr/bin/python
# coding:utf-8
"""[main.py]

Returns:
    [cmd] -- [cmd description]
"""
import argparse
import os
import sys
import shutil
from pys import path
# init path
GEN_DIR = os.path.split(os.path.realpath(__file__))[0]
sys.path.append('{}/pys'.format(GEN_DIR))
path.set_path(GEN_DIR)
# init end

from pys.build import config
from pys.conf import mconf, mexpand, mgroup
from pys.tool import ca
from pys import version
from pys.log import CONSOLER
from pys.log import console_error
from pys.opr import opr_cert
from pys.opr import create_group
from pys.opr import build
from pys.opr import expand_node
from pys.opr import demo
from pys.log import LOGGER



def init():
    """[init function]
    """

    # init pwd dir
    LOGGER.info('main init ,GEN_DIR is %s', GEN_DIR)

    # parser mchain.conf for project initialize
    mconf.parser('{}/conf/mchain.ini'.format(GEN_DIR))
    mexpand.parser('{}/conf/mexpand.ini'.format(GEN_DIR))
    mgroup.parser('{}/conf/mgroup.ini'.format(GEN_DIR))


def usage():
    """cmd usage
    """

    parser = argparse.ArgumentParser(
        description=' Build install pkg for multi chain'
        ' and manage the chain  package with ansible. ')

    parser.add_argument('--version',
                        action='store_true', help='show generator\'s version. ')

    pkg_group = parser.add_argument_group(
        ' Build, Expand, Export, List Chain Package Options ')

    pkg_group.add_argument('--build', nargs=1, metavar=('data_dir'),
                           help=' build chain packages with the specified configuration file')
    pkg_group.add_argument('--expand', nargs=2, metavar=('conf_dir', 'data_dir'),
                           help='expand node packages on exist chain')
    pkg_group.add_argument('--create', nargs=1, metavar=('data_dir'),
                           help='create group genesis.')

    tools_group = parser.add_argument_group(
        ' Other Tools Options ')
    tools_group.add_argument('--chainca', nargs=1, metavar=('chain_dir'),
                             help='generate root cert')
    tools_group.add_argument('--agencyca', nargs=3, metavar=('agency_dir',
                                                             'chain_dir',
                                                             'agency_name'),
                             help='generate agency cert')
    tools_group.add_argument('--nodeca', nargs=3, metavar=('node_dir',
                                                           'agency_dir',
                                                           'node_name'),
                             help='generate node cert')
    tools_group.add_argument('--sdkca', nargs=2, metavar=('sdk_dir',
                                                           'agency_dir'),
                             help='generate sdk cert')
    tools_group.add_argument('--gm', action='store_true',
                             help='follow gm operation.')
    tools_group.add_argument('--demo', action='store_true',
                             help='demo fisco ')
    tools_group.add_argument('--certbuild', nargs=1, metavar=('cert_dir'),
                             help='create cert by mchain.ini')
    tools_group.add_argument('--certexpand', nargs=1, metavar=('cert_dir'),
                             help='create cert by mexpand.ini')
    tools_group.add_argument('--deploykey', nargs=2, metavar=('cert_dir', 'pkg_dir'),
                             help='deploy node.key from cert_dir to pkg_dircert')
    tools_group.add_argument('--combine', nargs=2, metavar=('config.ini', 'config.ini'),
                             help='concatenate two config.ini')
    args = parser.parse_args()
    if args.version:
        version.version()
    elif args.gm:
        CONSOLER.info('======= BUILD_GM ============= ON =======')
        config.set_gm()
    elif args.build:
        CONSOLER.info(' build operation begin.')
        build.build(args.build[0])
        CONSOLER.info(' build operation end.')
    # elif args.build:
    #     opr_build.build(args.build[0], args.build[1])
    #     CONSOLER.info(' build operation end.')
    elif args.expand:
        CONSOLER.info(' expand operation begin.')
        expand_node.expand(args.expand[0], args.expand[1])
        CONSOLER.info(' expand operation end.')
    elif args.create:
        CONSOLER.info(' expand operation begin.')
        create_group.create_group(args.create[0])
        CONSOLER.info(' expand operation end.')
    elif args.demo:
        demo.demo_build()
    elif args.chainca:
        CONSOLER.info(' chain cert begin.')
        chain_dir = args.chainca[0]
        ca.generate_root_ca(chain_dir)
        CONSOLER.info(' chain cert end.')
    elif args.agencyca:
        CONSOLER.info(' agency cert begin.')
        agency_dir = args.agencyca[0]
        chain_dir = args.agencyca[1]
        agency_name = args.agencyca[2]
        ca.generator_agent_ca(agency_dir, chain_dir, agency_name)
        CONSOLER.info(' agency cert end.')
    elif args.nodeca:
        CONSOLER.info(' node cert begin.')
        node_dir = args.nodeca[0]
        agency_dir = args.nodeca[1]
        node_name = args.nodeca[2]
        ca.generator_node_ca(node_dir, agency_dir, node_name)
        CONSOLER.info(' node cert end.')
    elif args.sdkca:
        CONSOLER.info(' sdk cert begin.')
        sdk_dir = args.sdkca[0]
        agency_dir = args.sdkca[1]
        ca.generator_sdk_ca(sdk_dir, agency_dir, 'sdk')
        CONSOLER.info(' sdk cert end.')
    elif args.certbuild:
        cert_dir = args.certbuild[0]
        CONSOLER.info(' generate cert to %s by mchain.ini.', cert_dir)
        opr_cert.gen_build_cert(cert_dir)
        # ca.generator_node_ca(agency_dir, node_dir, node_name)
        CONSOLER.info(' generate cert by mchain.ini end.')
    elif args.certexpand:
        cert_dir = args.certexpand[0]
        CONSOLER.info(' generate cert to %s by mchain.ini.', cert_dir)
        opr_cert.gen_expand_cert(cert_dir)
        CONSOLER.info(' generate cert by mchain.ini end.')
    elif args.deploykey:
        get_path = args.deploykey[0]
        send_path = args.deploykey[1]
        CONSOLER.info(' get cert from %s to %s', get_path, send_path)
        opr_cert.deploy_key(get_path, send_path)
        CONSOLER.info(' deploy cert end.')
    elif args.combine:
        get_path = args.combine[0]
        send_path = args.combine[1]
        CONSOLER.info(' combine config.ini from %s to %s', get_path, send_path)
        config.concatenate_cfg(get_path, send_path)
        CONSOLER.info(' combine config.ini end.')
    # elif args.sdkca:
    #     CONSOLER.info(' sdk cert begin.')
    #     sdk_dir = args.sdkca[0]
    #     agency_dir = args.sdkca[1]
    #     ca.generator_sdk_ca(agency_dir, sdk_dir)
    #     CONSOLER.info(' sdk cert end.')
    else:
        console_error(
            ' invalid operation,  \"generator -h\" can be used to show detailed usage. ')
        os.system('./generator -h')
    return 0


def main():
    """[main]
    """

    try:
        init()
    except Exception as e:
        console_error(' generator init fault , %s \033[0m' % e)
    else:
        usage()


if __name__ == '__main__':
    main()
